Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway: 
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC 
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: us-east-2a

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24 
      MapPublicIpOnLaunch: true
      AvailabilityZone: us-east-2b

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true 
      AvailabilityZone: us-east-2c

  PrivateSubnet1: 
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: us-east-2a

  PrivateSubnet2:
    Type: AWS::EC2::Subnet 
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: us-east-2b

  PrivateSubnet3:  
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: us-east-2c



  # CodeDeploy application 
  MyApplication:
    Type: AWS::CodeDeploy::Application
    Properties: 
      ApplicationName: BlueGreenSample
      ComputePlatform: ECS

  # CodeDeploy deployment group
  DeploymentGroup:  
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref MyApplication 
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce 
      DeploymentGroupName: MyDeploymentGroup
      ServiceRoleArn: !Ref CodeDeployRole
      Ec2TagFilter: 
        Type: key-value
        Key: Name
        Value: ecs-host
      DeploymentStyle: 
        DeploymentOption: WITH_TRAFFIC_CONTROL
        DeploymentType: BLUE_GREEN
      EcsServices: 
        - ClusterName: !Ref EcsCluster
          ServiceName: !Ref EcsService


  # IAM role for CodeDeploy    
  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow 
            Principal: 
              Service: codedeploy.amazonaws.com
            Action: "sts:AssumeRole"

    # ECS cluster
  EcsCluster:
    Type: AWS::ECS::Cluster

  # Task definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: my-task
      
      ContainerDefinitions: 
        - Name: my-container
          Image: nginx:latest 
          Memory: 512
          PortMappings:
            - ContainerPort: 80

  # ECS service  
  EcsService:
    Type: AWS::ECS::Service
    Properties:  
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LoadBalancers:
        - !Ref LoadBalancer
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref MySecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
            - !Ref PrivateSubnet3

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all ingress from itself
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 10.0.0.0/16

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref MySecurityGroup
      IpProtocol: -1
      FromPort: 0
      ToPort: 0
      SourceSecurityGroupId: !Ref MySecurityGroup

  # NLB
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: VPCGatewayAttachment
    Properties:
      Type: network
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LoadBalancerAttributes:
        - Key: "idle_timeout.timeout_seconds"
          Value: "30"
